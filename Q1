
#include<stdio.h>


// int findpeak(int arr[],int n){
//     if(n == 1)
//         return 0;
//     if(arr[0] >= arr[1])
//         return 0;
//     if(arr[n-1] >= arr[n-2])
//         return n-1;

//     for(int i=1; i<n-1; i++){
//         if(arr[i] >= arr[i-1] && arr[i] >= arr[i+1])
//             return i;
        
//     }   
// }
//       time complexity 0(n)


int findpeak(int arr[],int low,int high,int n){
    int mid = low + (high - low)/2;

    if((mid==0 || arr[mid-1] <= arr[mid]) && (mid == n-1 || arr[mid +1] <= arr[mid])){
        return mid;
    } else if (mid>0 && arr[mid-1] > arr[mid]){
        return findpeak(arr,low,mid-1,n);
    } else {
        return findpeak(arr,mid+1,high,n);
    }
}
int peak(int arr[],int n){
    return findpeak(arr,0,n-1,n);
}
// Time complexity 0(logn)

int main(){
    int arr[]= {8,55,9,7,2,90};
    int n = sizeof(arr) / sizeof(arr[0]);
    printf("The index of the element %d",peak(arr,n));
}
